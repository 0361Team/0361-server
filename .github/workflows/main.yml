name: Build, Push to Artifact Registry and Deploy to Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: 'actions/checkout@v4'

      # Google Cloud 인증 설정 (IAM 서비스 계정 키 사용)
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # gcloud CLI 설정
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      # Artifact Registry에 인증
      - name: 'Configure Docker for Artifact Registry'
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REPOSITORY_REGION }}-docker.pkg.dev --quiet
      # 이미지 빌드 전에 properties 파일 복원
      - name: 'Decode and create secret properties file'
        run: |
          echo "${{ secrets.SPRING_SECRET_PROPERTIES }}" | base64 -d > src/main/resources/application-secret.properties
        # Docker 이미지 빌드 및 Artifact Registry 푸시
      - name: 'Build and Push Docker image to Artifact Registry'
        run: |
          # 이미지에 고유 태그 부여 (커밋 해시 및 날짜 사용)
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          export IMAGE_NAME="${{secrets.GCP_REPOSITORY_REGION}}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPOSITORY_NAME }}/${{ secrets.GCP_SERVICE_NAME }}:${{ github.sha }}-${TIMESTAMP}"
          # Docker 빌드 및 푸시
          docker build --platform=linux/amd64 -t $IMAGE_NAME .
          docker push $IMAGE_NAME
          
          # 추가로 latest 태그 설정 (main 브랜치인 경우)
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            LATEST_TAG="${{ secrets.GCP_REPOSITORY_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPOSITORY_NAME }}/${{ secrets.GCP_SERVICE_NAME }}:latest"
            docker tag $IMAGE_NAME $LATEST_TAG
            docker push $LATEST_TAG
            echo "Pushed latest tag: $LATEST_TAG"
          fi
          
          # 다음 단계를 위해 이미지 이름 저장
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      # main 브랜치에서만 Cloud Run 배포 실행
      - id: 'deploy'
        name: 'Deploy to Cloud Run'
        if: github.ref == 'refs/heads/main'
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: '${{ secrets.GCP_SERVICE_NAME }}'
          image: '${{ env.IMAGE_NAME }}'
          region: '${{ secrets.GCP_REPOSITORY_REGION }}'
          env_vars: |
            SPRING_PROFILES_ACTIVE=prod
            API_URL=${{ secrets.API_URL }}
          timeout: '300s'
          flags: '--allow-unauthenticated --cpu=1 --memory=512Mi --min-instances=0 --max-instances=1'
          # vpc-connector: 'projects/${{ secrets.GCP_PROJECT_ID }}/locations/${{ secrets.GCP_REGION }}/connectors/my-vpc-connector'

      # 배포 URL 출력
      - name: 'Show Deployment URL'
        if: github.ref == 'refs/heads/main'
        run: 'echo 서비스가 배포되었습니다: ${{ steps.deploy.outputs.url }}'
